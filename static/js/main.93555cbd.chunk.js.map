{"version":3,"sources":["components/Node.js","models/NodeType.js","models/NodeInfo.js","components/Desktop.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Node","toggleSwitch","props","nodeInfo","switchEnabled","simulate","this","connections","handle","defaultPosition","defaultPos","positionOffset","className","id","status","onContextMenu","removeNode","nodeType","name","svg","src","hasSwitch","onClick","inputs","map","index","key","hasIncomingConnectionsOnPort","onMouseUp","_","connectLine","removeConnections","outputs","onMouseDown","startLine","Component","INPUT","transform","OUTPUT","__","NOT_GATE","AND_GATE","OR_GATE","NAND_GATE","NodeInfo","x","y","v4","startStatus","startSwitchEnabled","undefined","find","c","to","getProcessedInput","processedInput","filter","from","Array","length","fill","getStorageObject","document","getElementById","pos","getBoundingClientRect","nodeTypeKey","Object","keys","NodeType","k","i","push","o","Desktop","state","points","nodes","fromNode","loadedFromLocalStorage","mouseMove","mouseX","mouseY","width","height","setState","mouseUp","getConnectionLineOfConnection","connection","fromPos","toPos","nodesStatusSnapshot","JSON","stringify","n","removeConnection","getConnectionStorageObject","fromNodeId","fromPointId","toNodeId","toPointId","save","storageNodes","localStorage","setItem","storageConnections","load","getItem","parse","addNewNode","type","position","Math","floor","window","innerWidth","innerHeight","addEventListener","e","values","t","onMouseMove","clientX","clientY","preventDefault","line","node","Sidebar","App","desktopX","desktopY","mouseStartPos","desktopRef","React","createRef","mouseDown","button","current","ref","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.93555cbd.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport {ReactSVG} from 'react-svg';\r\n\r\nexport default class Node extends Component {\r\n    toggleSwitch = () => {\r\n        this.props.nodeInfo.switchEnabled = !this.props.nodeInfo.switchEnabled;\r\n        this.props.simulate();\r\n    }\r\n\r\n    render() {\r\n        const {nodeInfo, connections} = this.props;\r\n\r\n        return (\r\n            <Draggable handle={'.node__container'} defaultPosition={nodeInfo.defaultPos} positionOffset={this.props.positionOffset}>\r\n                <div className={'node'} id={nodeInfo.id}>\r\n                    <div className={'node__container ' + (nodeInfo.status ? 'node__container--active' : '')} onContextMenu={() => this.props.removeNode()}>\r\n                        <div className={'node__name'}>{nodeInfo.nodeType.name}</div>\r\n\r\n                        {nodeInfo.nodeType.svg !== null &&\r\n                        <div className={'node__svg ' + (nodeInfo.status ? 'node__svg--active' : '')}>\r\n                            <ReactSVG src={`assets/${nodeInfo.nodeType.svg}`} />\r\n                        </div>\r\n                        }\r\n\r\n                        {nodeInfo.nodeType.hasSwitch &&\r\n                        <div className={'switch ' + (nodeInfo.switchEnabled ? 'switch--active' : '')} onClick={() => this.toggleSwitch()}>\r\n                            <div className={'switch__inner'}/>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className={'node__inputs'}>\r\n                        {nodeInfo.inputs.map((id, index) =>\r\n                            <div key={index} id={id} className={'node__point ' + (nodeInfo.hasIncomingConnectionsOnPort(id, connections) ? 'node__point--filled' : '')}\r\n                                 onMouseUp={_ => this.props.connectLine(id)}\r\n                                 onContextMenu={() => this.props.removeConnections(id)}\r\n                            />\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className={'node__outputs'}>\r\n                        {nodeInfo.outputs.map((id, index) =>\r\n                            <div key={index} id={id} className={'node__point node__point--filled'}\r\n                                 onMouseDown={() => this.props.startLine(id)}\r\n                                 onContextMenu={() => this.props.removeConnections(id)}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n","export default {\r\n    INPUT: {\r\n        inputs: 0,\r\n        outputs: 1,\r\n        name: 'INPUT',\r\n        hasSwitch: true,\r\n        transform: (inputs, switchEnabled) => switchEnabled,\r\n        key: 'i',\r\n        svg: null\r\n    },\r\n    OUTPUT: {\r\n        inputs: 1,\r\n        outputs: 0,\r\n        name: 'OUTPUT',\r\n        hasSwitch: false,\r\n        transform: (inputs, __) => inputs[0],\r\n        key: 'u',\r\n        svg: null\r\n    },\r\n    NOT_GATE: {\r\n        inputs: 1,\r\n        outputs: 1,\r\n        name: 'NOT-GATE',\r\n        hasSwitch: false,\r\n        transform: (inputs, _) => !inputs[0],\r\n        key: 'n',\r\n        svg: 'not.svg'\r\n    },\r\n    AND_GATE: {\r\n        inputs: 2,\r\n        outputs: 1,\r\n        name: 'AND-GATE',\r\n        hasSwitch: false,\r\n        transform: (inputs, _) => inputs[0] && inputs[1],\r\n        key: 'a',\r\n        svg: 'and.svg'\r\n    },\r\n    OR_GATE: {\r\n        inputs: 2,\r\n        outputs: 1,\r\n        name: 'OR-GATE',\r\n        hasSwitch: false,\r\n        transform: (inputs, _) => inputs[0] || inputs[1],\r\n        key: 'o',\r\n        svg: 'or.svg'\r\n    },\r\n    NAND_GATE: {\r\n        inputs: 2,\r\n        outputs: 1,\r\n        name: 'NAND-GATE',\r\n        hasSwitch: false,\r\n        transform: (inputs, _) => !(inputs[0] && inputs[1]),\r\n        key: 'A',\r\n        svg: 'nand.svg'\r\n    },\r\n};\r\n","import {v4} from 'uuid';\r\nimport NodeType from './NodeType';\r\n\r\nexport class NodeInfo {\r\n    constructor(nodeType, defaultPos = {x: 0, y: 0}, id = v4(), startStatus = false, startSwitchEnabled = false) {\r\n        this.id = id;\r\n        this.nodeType = nodeType;\r\n        this.defaultPos = defaultPos;\r\n\r\n        this.switchEnabled = startSwitchEnabled;\r\n        this.status = startStatus;\r\n\r\n        this.inputs = [];\r\n        this.outputs = [];\r\n\r\n        for (let i = 0; i < nodeType.inputs; i++)\r\n            this.inputs.push(`NODE-${this.id}_INPUT-${i}`);\r\n\r\n        for (let o = 0; o < nodeType.outputs; o++)\r\n            this.outputs.push(`NODE-${this.id}_OUTPUT-${o}`);\r\n    }\r\n\r\n    hasIncomingConnectionsOnPort = (id, connections) => connections.find(c => c.to.id === id) !== undefined;\r\n\r\n    getProcessedInput = connections => {\r\n        const processedInput = connections.filter(c => c.to.nodeInfo.id === this.id).map(c => c.from.nodeInfo.status);\r\n        return [...processedInput, ...Array(this.nodeType.inputs - processedInput.length).fill(false)];\r\n    }\r\n\r\n    simulate = connections => {\r\n        this.status = this.nodeType.transform(this.getProcessedInput(connections), this.switchEnabled);\r\n    }\r\n\r\n    getStorageObject = () => {\r\n        if (document.getElementById(this.id) === null) return null;\r\n\r\n        const pos = document.getElementById(this.id).getBoundingClientRect();\r\n\r\n        return {\r\n            id: this.id,\r\n            nodeTypeKey: Object.keys(NodeType).find(k => NodeType[k] === this.nodeType),\r\n            pos: {x: pos.x, y: pos.y},\r\n            status: this.status,\r\n            switchEnabled: this.switchEnabled\r\n        };\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport Node from './Node';\r\nimport {NodeInfo} from '../models/NodeInfo';\r\nimport NodeType from '../models/NodeType';\r\n\r\nconst MAX_SIMULATION_ITERATIONS = 50;\r\n\r\nexport default class Desktop extends Component {\r\n    state = {\r\n        points: '',\r\n        connections: [],\r\n        nodes: []\r\n    }\r\n\r\n    fromNode = null;\r\n    loadedFromLocalStorage = false;\r\n\r\n    startLine = (nodeInfo, id) => {\r\n        this.fromNode = {nodeInfo, id};\r\n    }\r\n\r\n    mouseMove = (mouseX, mouseY) => {\r\n        if (this.fromNode === null) return;\r\n\r\n        const {x, y, width, height} = document.getElementById(this.fromNode.id).getBoundingClientRect();\r\n\r\n        this.setState({points: `${x + width / 2},${y + height / 2} ${mouseX},${mouseY}`});\r\n    }\r\n\r\n    mouseUp = () => {\r\n        this.fromNode = null;\r\n        this.setState({points: ''});\r\n    }\r\n\r\n    connectLine = (nodeInfo, id) => {\r\n        if (this.fromNode === null) return;\r\n\r\n        if (this.state.connections.find(c => c.to.id === id) === undefined) {\r\n            this.setState({\r\n                    points: '',\r\n                    connections: [...this.state.connections, {from: this.fromNode, to: {nodeInfo, id}}]\r\n                },\r\n                () => this.simulate()\r\n            );\r\n        }\r\n\r\n        this.fromNode = null;\r\n    }\r\n\r\n    getConnectionLineOfConnection = connection => {\r\n        if (document.getElementById(connection.from.id) === null || document.getElementById(connection.to.id) === null) return '';\r\n\r\n        const fromPos = document.getElementById(connection.from.id).getBoundingClientRect();\r\n        const toPos = document.getElementById(connection.to.id).getBoundingClientRect();\r\n        return `${fromPos.x + fromPos.width / 2},${fromPos.y + fromPos.height / 2} ${toPos.x + toPos.width / 2},${toPos.y + toPos.height / 2}`;\r\n    }\r\n\r\n    simulate = () => {\r\n        for (let i = 0; i < MAX_SIMULATION_ITERATIONS; i++) {\r\n            const nodesStatusSnapshot = JSON.stringify(this.state.nodes.map(n => n.status));\r\n\r\n            for (let n of this.state.nodes)\r\n                n.simulate(this.state.connections);\r\n\r\n            if (nodesStatusSnapshot === JSON.stringify(this.state.nodes.map(n => n.status)))\r\n                break;\r\n        }\r\n\r\n        this.setState({});\r\n    }\r\n\r\n    removeConnection = connection => {\r\n        if (this.fromNode !== null) return;\r\n\r\n        this.setState(\r\n            {connections: this.state.connections.filter(c => c !== connection)},\r\n            () => this.simulate()\r\n        );\r\n    }\r\n\r\n    removeConnections = id => {\r\n        if (this.fromNode !== null) return;\r\n\r\n        this.setState(\r\n            {connections: this.state.connections.filter(c => c.from.id !== id && c.to.id !== id)},\r\n            () => this.simulate()\r\n        );\r\n    }\r\n\r\n    getConnectionStorageObject = connection =>\r\n        ({fromNodeId: connection.from.nodeInfo.id, fromPointId: connection.from.id, toNodeId: connection.to.nodeInfo.id, toPointId: connection.to.id});\r\n\r\n    save = () => {\r\n        if (!this.loadedFromLocalStorage) return;\r\n\r\n        const storageNodes = JSON.stringify(this.state.nodes.map(n => n.getStorageObject()).filter(n => n !== null));\r\n        localStorage.setItem('nodes', storageNodes);\r\n\r\n        const storageConnections = JSON.stringify(this.state.connections.map(c => this.getConnectionStorageObject(c)));\r\n        localStorage.setItem('connections', storageConnections);\r\n    }\r\n\r\n    load = () => {\r\n        let nodes = [];\r\n        let connections = [];\r\n\r\n        if (localStorage.getItem('nodes') !== null)\r\n            nodes = JSON\r\n                .parse(localStorage.getItem('nodes'))\r\n                .map(n => new NodeInfo(NodeType[n.nodeTypeKey], n.pos, n.id, n.status, n.switchEnabled));\r\n\r\n        if (localStorage.getItem('connections') !== null)\r\n            connections = JSON\r\n                .parse(localStorage.getItem('connections'))\r\n                .map(c => ({\r\n                    from: {nodeInfo: nodes.find(n => n.id === c.fromNodeId), id: c.fromPointId},\r\n                    to: {nodeInfo: nodes.find(n => n.id === c.toNodeId), id: c.toPointId}\r\n                }));\r\n\r\n        this.setState(\r\n            {nodes, connections},\r\n            () => {\r\n                this.loadedFromLocalStorage = true;\r\n                this.simulate();\r\n            }\r\n        );\r\n    }\r\n\r\n    addNewNode = type => {\r\n        let {x, y} = this.props.position;\r\n\r\n        x = -x + Math.floor(window.innerWidth / 2) - 100;\r\n        y = -y + Math.floor(window.innerHeight / 2) - 50;\r\n\r\n        this.setState(\r\n            {\r\n                nodes: [...this.state.nodes, new NodeInfo(type, {x, y})]\r\n            },\r\n            () => this.simulate()\r\n        );\r\n    }\r\n\r\n    removeNode = id => {\r\n        this.setState(\r\n            {\r\n                nodes: this.state.nodes.filter(n => n.id !== id),\r\n                connections: this.state.connections.filter(c => c.from.nodeInfo.id !== id && c.to.nodeInfo.id !== id)\r\n            },\r\n            () => this.simulate()\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.load();\r\n\r\n        window.addEventListener('keydown', e => {\r\n            const type = Object.values(NodeType).find(t => t.key === e.key);\r\n            if (type !== undefined)\r\n                this.addNewNode(type);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.save();\r\n\r\n        return (\r\n            <div className={'desktop'}\r\n                 onMouseMove={e => this.mouseMove(e.clientX, e.clientY)}\r\n                 onMouseUp={() => this.mouseUp()} onContextMenu={e => e.preventDefault()}\r\n            >\r\n                <svg className={'line'}>\r\n                    <polyline points={this.state.points}/>\r\n                </svg>\r\n\r\n                {this.state.connections\r\n                    .map(connection => ({connection, line: this.getConnectionLineOfConnection(connection)}))\r\n                    .map(({connection, line}, i) =>\r\n                        <svg className={'line ' + (connection.from.nodeInfo.status ? 'line--active' : '')} key={i}>\r\n                            <polyline points={line} onContextMenu={() => this.removeConnection(connection)}/>\r\n                        </svg>\r\n                    )}\r\n\r\n                {this.state.nodes.map(node => (\r\n                    <Node key={node.id}\r\n                          startLine={id => this.startLine(node, id)}\r\n                          connectLine={id => this.connectLine(node, id)}\r\n                          removeConnections={id => this.removeConnections(id)}\r\n                          removeNode={() => this.removeNode(node.id)}\r\n                          nodeInfo={node}\r\n                          connections={this.state.connections}\r\n                          simulate={() => this.simulate()}\r\n                          positionOffset={this.props.position}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {ReactSVG} from 'react-svg';\r\nimport NodeType from '../models/NodeType';\r\n\r\nexport default class Sidebar extends Component {\r\n    render() {\r\n        return (\r\n            <div className={'sidebar'}>\r\n                {Object.values(NodeType).map((type, index) =>\r\n                    <div className={'sidebar-item'} key={index} onClick={() => this.props.addNewNode(type)}>\r\n                        <div className={'sidebar-item__name'}>{type.name}</div>\r\n                        <div className={'sidebar-item__svg'}><ReactSVG src={`assets/${type.svg}`}/></div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\nimport Desktop from './components/Desktop';\nimport Sidebar from \"./components/Sidebar\";\n\nexport default class App extends Component {\n    state = {\n        desktopX: 0,\n        desktopY: 0\n    }\n\n    mouseStartPos = null;\n    desktopRef = React.createRef();\n\n    mouseDown = (mouseX, mouseY, button) => {\n        if (button !== 1) return;\n        this.mouseStartPos = {x: mouseX, y: mouseY, desktopX: this.state.desktopX, desktopY: this.state.desktopY};\n    }\n\n    mouseMove = (mouseX, mouseY) => {\n        if (this.mouseStartPos === null) return;\n\n        const {x, y, desktopX, desktopY} = this.mouseStartPos;\n        this.setState({desktopX: desktopX - (x - mouseX), desktopY: desktopY - (y - mouseY)});\n    }\n\n    mouseUp = () => {\n        this.mouseStartPos = null;\n    }\n\n    addNewNode = type => {\n        this.desktopRef.current.addNewNode(type);\n    }\n\n    render() {\n        return (\n            <div className={'app'}\n                 onMouseDown={e => this.mouseDown(e.clientX, e.clientY, e.button)}\n                 onMouseMove={e => this.mouseMove(e.clientX, e.clientY)}\n                 onMouseUp={() => this.mouseUp()}\n            >\n                <Desktop position={{x: this.state.desktopX, y: this.state.desktopY}} ref={this.desktopRef}/>\n                <Sidebar addNewNode={type => this.addNewNode(type)}/>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    // <React.StrictMode>\n    <App/>,\n    // </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}